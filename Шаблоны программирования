1.Порождающие шаблоны (creational)
1.1.Фабрика (factory method)
Цель: создание интерфейса, который создает объект. При этом выбор того, экземпляр какого класса создавать остается за классами, которые имплементируют данный интерфейс.
Для чего используется: для делегирования создания экземпляров другому классу
1.2.Абстрактная фабрика (abstract factory)
Цель: создание интерфейса для создания множества взаимосвязанных или взаимозависимых объектов, без жесткой привязки конкретным классам.
Для чего используется: для создания множеств взаимосвязанных объектов. 
1.3.Одиночка (singleton)
Цель: Гарантировать, что у класса будет только один экземпляр и к нему предоставлена глобальная точка доступа.
Для чего используется: для создание единственного экземпляра определенного класса.
1.4.Строитель (builder)
Цель: Отделить конструирование сложного объекта от его представления таким образом, чтобы в результате одного и того же конструирования мы могли получить разные представления.
Для чего используется: Для создания различных объектов из одного набора данных.
1.5.Прототип (prototype)
Цель: Определить вид создаваемых объектов с помощью экземпляра - прототипа и создавать новые объекты, копируя этот прототип.
Для чего используется: для созданий копий заданного объекта.
2.Структурные шаблоны (structural)
2.1.Адаптер(adapter)
Цель: Преобразование интерфейса одного класса в интерфейс того класса, который необходим клиенту.
Для чего используется: Для обеспечения совместной работы классов, интерфейсы которых не совместимы.
2.2.Мост (bridge)
Цель: Отделить абстракцию от ее реализации таким образом, чтобы мы могли изменять независимо друг от друга и то и другое.
Для чего используется: для получения преимуществ наследования без потери гибкости.
2.3.Композиция (composite)
Цель: Скомпонировать объекты в структуру по типу "дерева", позволяя клиентам единобразно трактовать отдельный и составные объекты.
Для чего используется: Для группировки мелких компонентов в более крупные, которые, в свою очередь, могут стать основой для более крупных структур.
2.4.Декоратор (decorator)
Цель: Динамическое добавление новых обязанностей объекту
Для чего используется: Используется в качестве альтернативы порождению подклассов для расширения функциональности.
2.5.Фасад (facade)
Цель: Предоставить унифицированный интерфейс вместо нескольких интерфейсов подсистемы. 
Для чего используется: для определения интерфейса выского уровня, которое упрощает использование подсистемы.
2.6.Приспособленец (flyweight)
Цель: Поддержка множества мелких объектов.
Для чего используется: Использует разделение для того, чтобы поддерживать много мелких объектов.
2.7.Прокси (proxy)
Цель: Для замещения другого объекта и контроля доступа к нему.
Для чего используется: Для обеспечения контроля доступа к определенному объекту.
3. Поведенчиские шаблоны (behaviour)
3.1.Цепочка отвественности (chain of responsibility)
Цель: Связывание объектов-получателей в цепочку и передача запроса по ней.
Для чего используется: Помогает избежать привязки отправителя запроса к его получателю, что дает возможность обработать данный запрос нескольким объектам.
3.2.Команда (command)
Цель: Инкапсулирование запроса в объект.
Для чего используется: Чтобы задать параметры клиентов для обработки определенных запросов, создание очереди из этих запросов или их контроля и поддержки отмены операций.
3.3.Интерпретатор (interpreter)
Цель: Определение представления грамматики объекта
Для чего используется: Используется для определения представления грамматики заданноого языка и интерпретации его предложений. 
3.4.Итератор (iterator)
Цель: Получение последовательного доступа ко всем элементам составного объекта.
Для чего используется: Для получения последовательного доступа ко всем элементам составного объекта, скрывая его внутреннее представление.
3.5.Посредник (mediator)
Цель: Инкапсуляция способа взаимодействия множества объектов.
Для чего используется: Для определения объекта, который инкапсулирует способ взаимодейтсвия множества объектов и обеспечения слабой связи между этими объектами.
3.6.Хранитель (memento)
Цель: Сохранить внутреннее состояние объекта за его пределы.
Для чего используется: Фиксирование внутреннего состояния объекта за его пределами не нарушая инкапсуляцию и восстановление объекта в случае необходимости.
3.7.Наблюдатель (observer)
Цель: Определение зависимости один ко многим между объектами.
Для чего используется: Определение зависимости один ко многим между объектами таким образом, что при изменении состоянии одного объекта все зависящие от него объекты были уведолмены об этом и обновились.
3.8.Состояние (state)
Цель: Управление поведением объекта в зависимости от состояния.
Для чего используется: Позволяет нам управлять поведением объекта в зависимости от внутреннего состояния объекта.
3.9.Стратегия (strategy)
Цель: Взаимозаменяемость семейств класса.
Для чего используется: Определения семейства классов, инкапсулирование каждого из них и организация их взаимозаменяемости.
3.10.Шаблонный метод (template method)
Цель: Определение основы класса и создание возможности подклассам переопределять его части.
Для чего используется: Определяет основу класса и позволяет подклассам переопределять некоторые его части не изменяя его структуру в целом.
3.11.Посетитель (visitor)
Цель: Описание действий, которые выполняются с каждым обьектом в некоторой структуре;
Для чего используется: Описание операций, который выполняются с каждым объектом некоторой структуры.
Позволяет определить новую операцию без изменения классов этих объектов.